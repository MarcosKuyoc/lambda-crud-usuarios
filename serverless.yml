service: lambda-crud-usuarios
frameworkVersion: '3'

package:
  individually: true
  patterns:
    - "!*/**"

custom:
  serverlessPluginTypescript:
    tsConfigFileLocation: './tsconfig.build.json'
  serverless-dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      docker: true
  serverless-offline:
    apiKey:
      - lambda-crud-usuarios-apikey
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: '2012-11-05'
    endpoint: http://localhost:9324
    region: us-east-1
    accessKeyId: doesnt_matter
    secretAccessKey: doesnt_matter
    skipCacheInvalidation: false

provider:
  name: aws
  runtime: nodejs16.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action: 'dynamodb:*'
          Resource: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/usersTable
        # - Effect: Allow
        #   Action:
        #     - 'sqs:*'
        #   Resource: arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:likequeue

functions:
  find-user:
    handler: src/services/find/handler.handler
    package:
      patterns:
        - '!src/test/**'
        - 'src/services/find/handler.ts'
        - 'src/services/shared/interfaces/new-user.interface.ts'
        - 'src/resources/aws/aws-dynamodb.ts'
        - 'src/resources/lambdas/find-by-id.ts'
    events:
      - http:
          private: true
          path: users/{id}
          method: GET
          request:
            parameters:
              paths:
                id: true
  create-user:
    handler: src/services/create/handler.handler
    package:
      patterns:
        - '!src/test/**'
        - 'src/services/create/handler.ts'
        - 'src/services/shared/interfaces/new-user.interface.ts'
        - 'src/resources/aws/aws-dynamodb.ts'
        - 'src/resources/lambdas/create-user.ts'
    events:
      - http:
          path: users
          method: POST
          request:
            schemas:
              appication/json: ${file(src/services/shared/schemas/user.schema.json)}
  update-user:
    handler: src/services/update/handler.handler
    package:
      patterns:
        - '!src/test/**'
        - 'src/services/update/handler.ts'
        - 'src/services/shared/interfaces/new-user.interface.ts'
        - 'src/resources/aws/aws-dynamodb.ts'
        - 'src/resources/lambdas/update-user.ts'
    events:
      - http:
          private: true
          path: users/{id}
          method: PATCH
          request:
            parameters:
              paths:
                id: true
            schemas:
              appication/json: ${file(src/services/shared/schemas/user.schema.json)}
  delete-user:
    handler: src/services/delete/handler.handler
    package:
      patterns:
        - '!src/test/**'
        - 'src/services/delete/handler.ts'
        - 'src/services/shared/interfaces/new-user.interface.ts'
        - 'src/resources/aws/aws-dynamodb.ts'
        - 'src/resources/lambdas/delete-user.ts'
    events:
      - http:
          private: true
          path: users/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  delete-user-py:
    handler: src/services/delete/delete-py.handler
    package:
      patterns:
        - '!src/test/**'
        - 'src/services/delete/delete-py.py'
    runtime: python3.9
    environment:
      VIRTUAL_ENV_PATH: ./sls_test_py/bin/python
    events:
      - http:
          private: true
          path: users/py/{id}
          method: DELETE
          request:
            parameters:
              paths:
                id: true
  likeProcessor:
    handler: src/services/sqs/like-user.handler
    reservedConcurrency: 1
    package:
      patterns:
        - '!src/test/**'
        - 'src/services/sqs/like-user.ts'
        - 'src/resources/aws/aws-dynamodb.ts'
        - 'src/resources/lambdas/update-likes.ts'
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - LikeQueue
              - Arn
  publisher:
    handler: src/services/sqs/publisher.handler
    package:
      patterns:
        - '!src/test/**'
        - 'src/services/sqs/publisher.ts'
        - 'src/resources/aws/aws-sqs.ts'
        - 'src/resources/sqs/send-message-sqs.ts'
    events:
      - http:
          private: true
          method: POST
          path: like

plugins:
  - serverless-plugin-typescript
  - serverless-dynamodb
  - serverless-lift
  - serverless-offline-sqs
  - serverless-offline

resources:
  Resources:
    LikeQueue:
      Type: 'AWS::SQS::Queue'
      Properties:
        QueueName: my-like-queue
    LikeQueueEventSourceMapping:
      Type: "AWS::Lambda::EventSourceMapping"
      Properties:
        BatchSize: 1  # Ajusta el valor del batchSize seg√∫n tus necesidades
        EventSourceArn:
          Fn::GetAtt:
            - LikeQueue
            - Arn
        FunctionName:
          Fn::GetAtt:
            - LikeProcessorLambdaFunction
            - Arn 
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: usersTable
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
